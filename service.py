import datetime
import asyncio
import os
import re

from telebot import types
import telebot

from model import write_to_db

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
TOKEN = os.environ.get('TOKEN')
URL = 'https://b24-iu5stq.bitrix24.site/backend_test/'

bot = telebot.TeleBot(TOKEN)


class User:
    '''
    –ö–ª–∞—Å—Å –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    '''

    def __init__(self):
        self.name = ''
        self.surname = ''
        self.email = ''
        self.phone_number = ''
        self.birth_date = ''
        self.last_message_by_bot = ''


users = dict()


def is_valid_email(email):
    '''
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã
    :param email: –ê–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã
    :return: bool
    '''
    pattern = re.compile(r'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$')
    match = pattern.search(email)
    return match is not None


def is_valid_phone_number(phone_number):
    '''
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    :param phone_number: –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    :return: bool
    '''
    pattern = re.compile(r'^\+7[0-9]{10}$')
    match = pattern.search(phone_number)
    return match is not None


def is_valid_birth_date(birth_date):
    '''
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
    :param birth_date: –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è
    :return: bool
    '''
    try:
        datetime.datetime.strptime(birth_date, '%d.%m.%Y')
        return True
    except ValueError:
        return False


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
@bot.message_handler(content_types=['text'])
def start(message):
    '''
    –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :return: none
    '''
    global users
    id = message.from_user.id
    # –°–æ–∑–¥–∞–µ–º —ç–∫—Å–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ –≤ —Å–ª–æ–≤–∞—Ä–µ —Å –∫–ª—é—á–µ–º –≤ –≤–∏–¥–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
    # –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    users[id] = User()
    if message.text == '/start':
        bot.send_message(id, "–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
        bot.register_next_step_handler(message, get_name)
    else:
        bot.send_message(id, f"–ü—Ä–∏–≤–µ—Ç, —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ—Ä–º—É –Ω–∞ —Å–∞–π—Ç–µ {URL}")
        bot.send_message(id, "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –≤–≤–µ–¥–∏—Ç–µ /start")


def get_name(message):
    '''
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :return: none
    '''
    global users
    id = message.from_user.id
    users[id].name = message.text
    bot.send_message(id, '–ö–∞–∫–∞—è —É —Ç–µ–±—è —Ñ–∞–º–∏–ª–∏—è?')
    bot.register_next_step_handler(message, get_surname)


def get_surname(message):
    '''
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–º–∏–ª–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :return: none
    '''
    global users
    id = message.from_user.id
    users[id].surname = message.text
    bot.send_message(id, '–í–≤–µ–¥–∏—Ç–µ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ example@example.com')
    bot.register_next_step_handler(message, get_email)


def get_email(message):
    '''
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞ –ø–æ—á—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :return: none
    '''
    global users
    id = message.from_user.id
    users[id].email = message.text
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã
    if is_valid_email(users[id].email):
        bot.register_next_step_handler(message, get_phone_number)
        bot.send_message(id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ +7–•–•–•–•–•–•–•–•–•–•')
    else:
        bot.send_message(id, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã, –≤–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ example@gmail.com')
        bot.register_next_step_handler(message, get_email)


def get_phone_number(message):
    '''
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :return: none
    '''
    global users
    id = message.from_user.id
    users[id].phone_number = message.text
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if is_valid_phone_number(users[id].phone_number):
        bot.send_message(id, '–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì')
        bot.register_next_step_handler(message, get_birth_date)
    else:
        bot.send_message(id, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –≤–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7–•–•–•–•–•–•–•–•–•–•')
        bot.register_next_step_handler(message, get_phone_number)


def get_birth_date(message):
    '''
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :return: none
    '''
    global users
    id = message.from_user.id
    users[id].birth_date = message.text
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
    if is_valid_birth_date(users[id].birth_date):

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–≤–µ–¥–µ–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        keyboard = types.InlineKeyboardMarkup()
        key_yes = types.InlineKeyboardButton(text='–î–∞', callback_data='yes')
        keyboard.add(key_yes)
        key_no = types.InlineKeyboardButton(text='–ù–µ—Ç', callback_data='no')
        keyboard.add(key_no)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å —Å –≤–≤–µ–¥–µ–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        question = f'–¢–µ–±—è –∑–æ–≤—É—Ç *{users[id].name}* *{users[id].surname}* –≤–∞—à–∞ –ø–æ—á—Ç–∞ *{users[id].email}* ' \
                   f'–≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ *{users[id].phone_number}* –≤–∞—à–∞ –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è *{users[id].birth_date}*'

        bot.send_message(id, question, parse_mode='Markdown')
        users[id].last_message_by_bot = bot.send_message(id, text='–í–µ—Ä–Ω–æ?', reply_markup=keyboard, ).message_id
    else:
        bot.send_message(id, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã, –≤–≤–µ–¥–∏—Ç–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
        bot.register_next_step_handler(message, get_birth_date)


@bot.callback_query_handler(func=lambda call: True)
def callback_worker(call):
    '''
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à –î–∞ –∏–ª–∏ –ù–µ—Ç - –ø–æ–¥—Ç–≤–µ—Ä–∂–ª–µ–Ω–∏–µ –≤–≤–µ–¥–µ–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    :param call: –í—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
    :return: none
    '''
    global users
    id = call.message.chat.id
    if call.data == "yes":  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–î–∞" –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        write_to_db(users[id], id)

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥–≤–æ–π–Ω–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        bot.delete_message(id, users[id].last_message_by_bot)

        bot.send_message(id, '–í —Ç–µ—á–µ–Ω–∏–∏ –¥–µ—Å—è—Ç–∏ –º–∏–Ω—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—é –í–∞–º —Å–∫—Ä–∏–Ω—à–æ—Ç —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã üôÇ')
        bot.send_message(id, '–ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–∏—Ç–µ /start')

        # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ª–æ–≤–∞—Ä—è
        users.__delitem__(id)
    elif call.data == "no":  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ù–µ—Ç" –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥–≤–æ–π–Ω–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        bot.delete_message(id, users[id].last_message_by_bot)
        bot.send_message(id, '–ü–æ–∫—Ä—É—Ç–∏–º –µ—â–µ, –Ω–∞–ø–∏—à–∏—Ç–µ /start')

        # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ª–æ–≤–∞—Ä—è
        users.__delitem__(id)


async def run_polling():
    '''
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã
    :return: none
    '''
    await asyncio.get_event_loop().run_in_executor(None, bot.polling)
